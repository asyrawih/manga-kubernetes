// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/asyrawih/manga/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// DoCreateUser provides a mock function with given fields: in
func (_m *UserService) DoCreateUser(in *domain.CreateUser) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.CreateUser) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoDeleteUser provides a mock function with given fields: id
func (_m *UserService) DoDeleteUser(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoGetUser provides a mock function with given fields: username
func (_m *UserService) DoGetUser(username string) (*domain.User, error) {
	ret := _m.Called(username)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoGetUsers provides a mock function with given fields:
func (_m *UserService) DoGetUsers() ([]*domain.User, error) {
	ret := _m.Called()

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func() []*domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoLogin provides a mock function with given fields: username, password
func (_m *UserService) DoLogin(username string, password string) (*domain.UserLoginResponse, error) {
	ret := _m.Called(username, password)

	var r0 *domain.UserLoginResponse
	if rf, ok := ret.Get(0).(func(string, string) *domain.UserLoginResponse); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserLoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
