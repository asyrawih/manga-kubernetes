// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/asyrawih/manga/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// MangaRepository is an autogenerated mock type for the MangaRepository type
type MangaRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: in
func (_m *MangaRepository) Create(in *domain.CreateRequest) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.CreateRequest) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: mangaId
func (_m *MangaRepository) Delete(mangaId string) error {
	ret := _m.Called(mangaId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mangaId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *MangaRepository) GetAll() (*domain.Mangas, error) {
	ret := _m.Called()

	var r0 *domain.Mangas
	if rf, ok := ret.Get(0).(func() *domain.Mangas); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mangas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAuthor provides a mock function with given fields: author
func (_m *MangaRepository) GetByAuthor(author string) (*domain.Mangas, error) {
	ret := _m.Called(author)

	var r0 *domain.Mangas
	if rf, ok := ret.Get(0).(func(string) *domain.Mangas); ok {
		r0 = rf(author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mangas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MangaRepository) GetByID(id string) (*domain.Manga, error) {
	ret := _m.Called(id)

	var r0 *domain.Manga
	if rf, ok := ret.Get(0).(func(string) *domain.Manga); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Manga)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: title
func (_m *MangaRepository) Search(title string) (*domain.Mangas, error) {
	ret := _m.Called(title)

	var r0 *domain.Mangas
	if rf, ok := ret.Get(0).(func(string) *domain.Mangas); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Mangas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, in
func (_m *MangaRepository) Update(id int, in *domain.UpdateRequest) error {
	ret := _m.Called(id, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.UpdateRequest) error); ok {
		r0 = rf(id, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMangaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMangaRepository creates a new instance of MangaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMangaRepository(t mockConstructorTestingTNewMangaRepository) *MangaRepository {
	mock := &MangaRepository{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
