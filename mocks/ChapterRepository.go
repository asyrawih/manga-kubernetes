// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/asyrawih/manga/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ChapterRepository is an autogenerated mock type for the ChapterRepository type
type ChapterRepository struct {
	mock.Mock
}

// CreateChapter provides a mock function with given fields: in
func (_m *ChapterRepository) CreateChapter(in *domain.CreateChapterRequest) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.CreateChapterRequest) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChapters provides a mock function with given fields:
func (_m *ChapterRepository) GetChapters() (*domain.Chapters, error) {
	ret := _m.Called()

	var r0 *domain.Chapters
	if rf, ok := ret.Get(0).(func() *domain.Chapters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chapters)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadChapter provides a mock function with given fields: id
func (_m *ChapterRepository) ReadChapter(id string) (*domain.Chapter, error) {
	ret := _m.Called(id)

	var r0 *domain.Chapter
	if rf, ok := ret.Get(0).(func(string) *domain.Chapter); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Chapter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChapters provides a mock function with given fields: in
func (_m *ChapterRepository) UpdateChapters(in *domain.UpdateChapterRequest) error {
	ret := _m.Called(in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.UpdateChapterRequest) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChapterRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewChapterRepository creates a new instance of ChapterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChapterRepository(t mockConstructorTestingTNewChapterRepository) *ChapterRepository {
	mock := &ChapterRepository{}
	mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
